# -*- coding: utf-8 -*-
"""TP5-Functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18isQj4J4gyh0giC2_SIqnZ6OHsPV1s5D

## Compute pay
"""

# 1
def compute_pay(hh, rr):
  if hours <= 40 :
    pay = rate * hours
  else:
    pay = 40 * rate + (hours - 40) * 1.5 * rate
  return pay

h = input('Enter Hours: ')
r = input('Enter Rate: ')
rate = float(r) 
hours = float(h)
pay = compute_pay(hours, rate)
print('Pay:', pay)

"""## Tokenization"""

# 2
sent = "Le matin, le chat miaule."
def tokenize(sentence):
  """
  splits a sentence s into a list of words, including "." and ","
  :return: the tokens 
  :rtype: str
  """
  sent = sentence.replace(",", " ,") # add a space before comma
  sent = sent.replace(".", " .") # add a space
  tokens = sent.split() #splits a sentence s into a list of words

  return tokens
tokens = tokenize(sent)
for token in tokens:
        print(token)

# 3
import string # import string module 
def word_count(sentence):
  """ 
   Count the number of words identied in a string of characters 
   by using the function tokenize(), but it does not count punctuation.
      :return: number of words
      :rtype: int
  """     
  tokens = tokenize(sentence)
  word_list = []
  for e in tokens:
    if e not in string.punctuation:
      word_list.append(e)
  return len(word_list),word_list

n, sent_list = word_count(sent)
print("This sentece contain",n,"words.")

"""## Character searching"""

# 4
def find_first(c,s):
    """ find the position (positive index) of the first occurrence of the character c in the string s.
         
        :param c: a character
        :type c: str
        :param s: string
        :type s: str 
        :return: index of c
        :rtype: int
    """ 
    for i in range(len(s)):
        if s[i] == c:
            return i
    return None
print(find_first("a", "maison"))

# 5
def find_last(c,s):
    """ find the position (negative index) of the last occurrence of the character c in the string s.
         
        :param c: a character
        :type c: str
        :param s: string
        :type s: str 
        :return: index of c
        :rtype: int
    """ 

    for i in range(1, len(s) + 1):
        if s[-i] == c:
            return -i
    return None
print(find_last("a", "maison"))

# 6
def find_next(c,s,p):
    """ Find the position (positive index) of the next occurrence of the character c in the string s 
        starting from from the index position p
         
        :param c: a character
        :type c: str
        :param s: string
        :type s: str 
        :param p: starting index
        :type p: int
        :return: index of c
        :rtype: int
    """    

    substring = s[p:]
    found = find_first(c, substring)
    if found != None:
        return p + found
    return None
find_next("r","arbre",2)

# 7
def find_all(c,s):    
    """ Displays the (positive) position indices of all occurrences of the character c in the string s.

        :param c: a character
        :type c: str
        :param s: string
        :type s: str 
    """

    found = find_next(c, s, 0)

    while found != None:
        print(found)
        found = find_next(c, s, found + 1)

find_all("i", "linguistique")